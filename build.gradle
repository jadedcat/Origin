buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

configurations {
    compile
    deployJars
}

apply plugin: 'scala'
apply plugin: 'forge'
apply plugin: 'maven'
apply plugin: "curseforge"

ext.configFile = file "CG.properties"
ext.curseFile = file "../curse.properties"

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

curseFile.withReader {
	def prop = new Properties()
	prop.load(it)
	project.ext.curseConfig = new ConfigSlurper().parse prop
}

group = "com.countrygamer.cgo"
archivesBaseName = "CGOrigin"

version = "3.0.5"

if (System.getenv().BUILD_NUMBER != null) {
    version = version + "_build-" + System.getenv().BUILD_NUMBER
}

minecraft {
    version = "${config.minecraft_version}-${config.forge_version}"
    runDir = "${config.assets_path}"

    replace "@PLUGIN_VERSION@", project.version
    replaceIn "Origin.scala"
}

version = "${config.minecraft_version}-$version"

private String getLastGitPush() {
	def outStream = new ByteArrayOutputStream()
	def lastGitPush = ""
	try {
		exec {
			executable = "git"
			args = ["rev-parse", "origin/master"]
			standardOutput = outStream
		}
		lastGitPush = outStream.toString().trim()
	}
	catch (e) {
		logger.quiet "Error while fetching last git tag: $e"
	}
	return lastGitPush
}

private String getRawChangelog() {
	def outStream = new ByteArrayOutputStream()
    String changelog = ""
    String lastGitPush = getLastGitPush()

    try {
        exec {
            executable = "git"
            args = ["log", "--pretty=%s~%b", "$lastGitPush..HEAD"]
            standardOutput = outStream
        }

        changelog = outStream.toString().trim()
    }
    catch (e) {
        logger.quiet "Error while generating theChangelog: $e"
    }

    return changelog
}

private String getChangelog() {
	String changelog = getRawChangelog()
	final String[] split = changelog.split("\n")
	
	final StringBuilder result = new StringBuilder()

	result.append("Changelog:\n")

	for (String s : split) {
		if (s.length() == 0) continue

		final String[] titleVbody = s.split("~")
		String temp = "\t" + titleVbody[0]

		for (int i = 1; i < titleVbody.length; i++) {
			temp = temp + "\n\t\t" + titleVbody[i]
		}

		temp = temp + "\r\n"
		result.append(temp)
	}

	//

	result.append("Dependencies:")
	result.append("\n\tForge " + "${config.forge_version}")

	result.toString()
}

def log = getChangelog()

curse {
	apiKey = curseConfig.curseforge_key
	projectId = "72503"
	changelog = log
	releaseType = "release"

}

task curseTest() << {
	logger.quiet "--"
	logger.quiet curseConfig.curseforge_key
	logger.quiet "--"
	logger.quiet log
	logger.quiet "--"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'src'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    from(sourceSets.main.allSource.srcDirs) {
        include '**/*.java'
        include '**/*.scala'
    }
    classifier = 'dev'
}

artifacts {
    archives jar
    archives sourcesJar
    archives deobfJar
}

uploadArchives {
    if (project.hasProperty("mavenUser") && project.hasProperty("mavenPassword")) {
        repositories {
            mavenDeployer {
                repository(url: "http://maven.dries007.net/content/repositories/ccm/") {
                    authentication(userName: mavenUser, password: mavenPassword)
                }
                pom {
                    groupId = project.group
                    version = project.version
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging 'jar'
                        description 'CG-Origin'
                        url 'https://github.com/TheCountryGamer/CG-Origin'

                        scm {
                            url 'https://github.com/TheCountryGamer/CG-Origin'
                            connection 'scm:git:git://github.com/TheCountryGamer/CG-Origin.git'
                            developerConnection 'scm:git:git@github.com:TheCountryGamer/CG-Origin.git'
                        }

                        issueManagement {
                            system 'github'
                            url 'https://github.com/TheCountryGamer/CG-Origin/issues'
                        }

                        licenses {
                            license {
                                name 'Apache License Version 2.0'
                                url 'https://github.com/TheCountryGamer/CG-Origin/blob/master/LICENSE'
                                distribution 'repo'
                            }
                        }

                        developers {
                            developer {
                                id 'TheCountryGamer'
                                name 'TheCountryGamer'
                                roles { role 'developer' }
                            }
                        }
                    }
                }
            }
        }
    }
}
